name: Testing package on arm64

on:
  push:
  workflow_dispatch:
  
jobs:
  install-dependencies:
    name: Install package dependencies
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
        
      - name: Make R library
        run: mkdir -p ${RUNNER_TEMP}/R-lib
        
      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/R-lib
          key: R_lib-ARM64-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            R_lib-ARM64-${{ hashFiles('**/DESCRIPTION') }}
            R_lib-ARM64-
      
      - name: Install the dependencies
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/grimbough/bioc-with-tinytex:devel-arm64
          shell: bash
          options: |
            --platform linux/arm64
            --volume ${{ runner.temp }}/R-lib:/R-lib
            --volume ${{ github.workspace }}:/build
            --env R_LIBS_USER=/R-lib
          run: |
            echo "options(Ncpus=2L, timeout = 300)" >> ~/.Rprofile
            Rscript -e 'pkgs <- remotes::dev_package_deps("/build/examplePKG", dependencies = TRUE)' \
                    -e 'BiocManager::install(pkgs$package, update = TRUE, ask = FALSE)'
            
  install-arm64:
    name: Install package on ARM64
    runs-on: ubuntu-22.04
    needs:   install-dependencies
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Make R library
        run: mkdir -p ${RUNNER_TEMP}/R-lib
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/R-lib
          key: R_lib-ARM64-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            R_lib-ARM64-${{ hashFiles('**/DESCRIPTION') }}
            R_lib-ARM64-

      - name: Install dependencies pass 1
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/grimbough/bioc-with-tinytex:devel-arm64
          options: |
            --platform linux/arm64
            --volume ${{ runner.temp }}/R-lib:/R-lib
            --volume ${{ github.workspace }}:/build
            --env R_LIBS_USER=/R-lib
            --workdir /build
          run: |
            ## Try installing the package dependencies in steps. First the local
            ## dependencies, then any remaining dependencies to avoid the
            ## issues described at
            ## https://stat.ethz.ch/pipermail/bioc-devel/2020-April/016675.html
            ## https://github.com/r-lib/remotes/issues/296
            ## Ideally, all dependencies should get installed in the first pass.

            message(paste('****', Sys.time(), 'installing BiocManager ****'))
            remotes::install_cran("BiocManager")

            BiocManager::install(version = "3.17", ask = FALSE, force = TRUE)
          
            ## For running the checks
            message(paste('****', Sys.time(), 'installing rcmdcheck and BiocCheck ****'))
            install.packages(c("rcmdcheck", "BiocCheck"), repos = BiocManager::repositories())

            BiocManager::install("BiocGenerics")

            ## Pass #1 at installing dependencies
            message(paste('****', Sys.time(), 'pass number 1 at installing dependencies: local dependencies ****'))
            remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = FALSE, upgrade = TRUE)
          continue-on-error: true
          shell: Rscript {0}

      - name: Install dependencies pass 2
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/grimbough/bioc-with-tinytex:devel-arm64
          options: |
            --platform linux/arm64
            --volume ${{ runner.temp }}/R-lib:/R-lib
            --volume ${{ github.workspace }}:/build
            --env R_LIBS_USER=/R-lib
            --workdir /build
          run: |
            ## Pass #2 at installing dependencies
            message(paste('****', Sys.time(), 'pass number 2 at installing dependencies: any remaining dependencies ****'))
            remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = TRUE, upgrade = TRUE, force = TRUE)
          shell: Rscript {0}

  check-arm64:
    name: Test package on ARM64
    runs-on: ubuntu-22.04
    needs:   install-arm64
    steps:

      - name: Session info
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/grimbough/bioc-with-tinytex:devel-arm64
          options: |
            --platform linux/arm64
            --volume ${{ runner.temp }}/R-lib:/R-lib
            --volume ${{ github.workspace }}:/build
            --env R_LIBS_USER=/R-lib
            --workdir /build
          run: |
            options(width = 100)
            pkgs <- installed.packages()[, "Package"]
            sessioninfo::session_info(pkgs, include_base = TRUE)
          shell: Rscript {0}

      - name: Run CMD check
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/grimbough/bioc-with-tinytex:devel-arm64
          options: |
            --platform linux/arm64
            --volume ${{ runner.temp }}/R-lib:/R-lib
            --volume ${{ github.workspace }}:/build
            --env R_LIBS_USER=/R-lib
            --workdir /build
          env:
            _R_CHECK_CRAN_INCOMING_: false
            DISPLAY: 99.0
          run: |
            options(crayon.enabled = TRUE)
            rcmdcheck::rcmdcheck(
              args = c("--no-manual", "--no-vignettes", "--timings"),
              build_args = c("--no-manual", "--keep-empty-dirs", "--no-resave-data"),
              error_on = "warning",
              check_dir = "check"
            )
            shell: Rscript {0}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: my-artifact
          path: |
            ~/**/*.tar.gz
            ~/**/*.install-out.txt
            ~/**/*.Rcheck
          if-no-files-found: warn
          